{
  "Vue3 Setup": {
    "prefix": "v3setup",
    "body": [
      "<script setup>",
      "${1:// 组件逻辑}",
      "</script>",
      "",
      "<template>",
      "\t<div>",
      "\t\t${2}",
      "\t</div>",
      "</template>",
      "",
      "<style scoped>",
      "${3}",
      "</style>"
    ],
    "description": "Vue 3 Setup SFC"
  },
  "Vue3 TypeScript Setup": {
    "prefix": "v3setup-ts",
    "body": [
      "<script setup lang=\"ts\">",
      "interface Props {",
      "\t${1:propName}: ${2:string}",
      "}",
      "",
      "defineProps<Props>()",
      "${3}",
      "</script>",
      "",
      "<template>",
      "\t<div>",
      "\t\t${4}",
      "\t</div>",
      "</template>"
    ],
    "description": "Vue 3 TypeScript Setup SFC"
  },
  "Vue3 Setup with Props and Emits": {
    "prefix": "v3setup-full",
    "body": [
      "<script setup lang=\"ts\">",
      "import { ref, computed } from 'vue'",
      "interface Props {",
      "\t${1:propName}: ${2:string}",
      "}",
      "",
      "const props = defineProps<Props>()",
      "",
      "interface Emits {",
      "\t(e: '${3:update}', value: ${4:string}): void",
      "}",
      "",
      "const emit = defineEmits<Emits>()",
      "",
      "// 响应式状态",
      "const ${5:state} = ref(${6:initialValue})",
      "",
      "// 计算属性",
      "const ${7:computed} = computed(() => {",
      "\treturn ${8:value}",
      "})",
      "",
      "// 方法",
      "function ${9:handleEvent}() {",
      "\temit('${3:update}', ${5:state}.value)",
      "}",
      "</script>",
      "",
      "<template>",
      "\t<div>",
      "\t\t<div>{{ ${7:computed} }}</div>",
      "\t\t<button @click=\"${9:handleEvent}\">Click me</button>",
      "\t</div>",
      "</template>",
      "",
      "<style scoped lang=\"${10|scss,less,css|}\">",
      "${11}",
      "</style>"
    ],
    "description": "Vue 3 Setup SFC with Props, Emits, and common patterns"
  },
  "Vue3 Setup with Async": {
    "prefix": "v3setup-async",
    "body": [
      "<script setup lang=\"ts\">",
      "import { ref, onMounted } from 'vue'",
      "",
      "// 状态",
      "const ${1:data} = ref<${2:any}[]>([])",
      "const loading = ref(false)",
      "const error = ref<Error | null>(null)",
      "",
      "// 获取数据方法",
      "async function fetch${3:Data}() {",
      "\ttry {",
      "\t\tloading.value = true",
      "\t\tconst response = await fetch('${4:apiUrl}')",
      "\t\t${1:data}.value = await response.json()",
      "\t} catch (e) {",
      "\t\terror.value = e as Error",
      "\t} finally {",
      "\t\tloading.value = false",
      "\t}",
      "}",
      "",
      "// 生命周期",
      "onMounted(() => {",
      "\tfetch${3:Data}()",
      "})",
      "</script>",
      "",
      "<template>",
      "\t<div>",
      "\t\t<div v-if=\"loading\">Loading...</div>",
      "\t\t<div v-else-if=\"error\">{{ error.message }}</div>",
      "\t\t<div v-else>",
      "\t\t\t<div v-for=\"item in ${1:data}\" :key=\"item.id\">",
      "\t\t\t\t{{ item }}",
      "\t\t\t</div>",
      "\t\t</div>",
      "\t</div>",
      "</template>"
    ],
    "description": "Vue 3 Setup SFC with async data fetching pattern"
  }
} 