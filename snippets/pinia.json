{
  "Vue3 Pinia Store": {
    "prefix": "v3store",
    "body": [
      "import { defineStore } from 'pinia'",
      "",
      "export const use${1:Feature}Store = defineStore('${2:feature}', () => {",
      "\t// 状态",
      "\tconst ${3:state} = ref(${4:initialValue})",
      "",
      "\t// 计算属性",
      "\tconst ${5:computed} = computed(() => {",
      "\t\treturn ${6:value}",
      "\t})",
      "",
      "\t// 操作方法",
      "\tfunction ${7:action}() {",
      "\t\t${8:// 实现逻辑}",
      "\t}",
      "",
      "\treturn {",
      "\t\t${3:state},",
      "\t\t${5:computed},",
      "\t\t${7:action}",
      "\t}",
      "})"
    ],
    "description": "创建 Pinia Store"
  },
  "Vue3 Pinia Store with TypeScript": {
    "prefix": "v3store-ts",
    "body": [
      "import { defineStore } from 'pinia'",
      "",
      "interface ${1:State} {",
      "\t${2:property}: ${3:type}",
      "}",
      "",
      "export const use${4:Feature}Store = defineStore('${5:feature}', () => {",
      "\t// 状态",
      "\tconst state = reactive<${1:State}>({",
      "\t\t${2:property}: ${6:initialValue}",
      "\t})",
      "",
      "\t// 计算属性",
      "\tconst ${7:computed} = computed(() => {",
      "\t\treturn state.${2:property}",
      "\t})",
      "",
      "\t// 操作方法",
      "\tasync function ${8:action}(payload: ${9:type}) {",
      "\t\ttry {",
      "\t\t\t${10:// 实现逻辑}",
      "\t\t} catch (error) {",
      "\t\t\tconsole.error(error)",
      "\t\t\tthrow error",
      "\t\t}",
      "\t}",
      "",
      "\treturn {",
      "\t\tstate,",
      "\t\t${7:computed},",
      "\t\t${8:action}",
      "\t}",
      "})"
    ],
    "description": "创建带有 TypeScript 支持的 Pinia Store"
  }
} 